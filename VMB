//@version=4

//  Thanks to dynausmaux for the code..
//  Thanks to falconCoin for https://www.tradingview.com/script/KVfgBvDd-Market-Cipher-B-Free-version-with-Buy-and-sell/ inspired me to start this.
//  Thanks to LazyBear for WaveTrend Oscillator https://www.tradingview.com/script/2KE8wTuF-Indicator-WaveTrend-Oscillator-WT/
//  Thanks to RicardoSantos for https://www.tradingview.com/script/3oeDh0Yq-RS-Price-Divergence-Detector-V2/
//  Thanks to LucemAnb for Plain Stochastic Divergence https://www.tradingview.com/script/FCUgF8ag-Plain-Stochastic-Divergence/
//  Thanks to andreholanda73 for MFI+RSI Area https://www.tradingview.com/script/UlGZzUAr/
//  I especially thanks to TradingView for its platform that facilitates development and learning.
//
//  CIRCLES & TRIANGLES:
//    - LITTLE CIRCLE: They appear at all WaveTrend wave crossings.
//    - GREEN CIRCLE: The wavetrend waves are at the oversold level and have crossed up (bullish).
//    - RED CIRCLE: The wavetrend waves are at the overbought level and have crossed down (bearish).
//    - GOLD/ORANGE CIRCLE: When RSI is below 20, WaveTrend waves are below or equal to -80 and have crossed up after good bullish divergence (DONT BUY WHEN GOLD CIRCLE APPEAR).
//    - None of these circles are certain signs to trade. It is only information that can help you. 
//    - PURPLE TRIANGLE: Appear when a bullish or bearish divergence is formed and WaveTrend waves crosses at overbought and oversold points.
//
//  NOTES:
//    - I am not an expert trader or know how to program pine script as such, in fact it is my first indicator only to study and all the code is copied and modified from other codes that are published in TradingView.
//    - I am very grateful to the entire TV community that publishes codes so that other newbies like me can learn and present their results. This is an attempt to imitate Market Cipher B. 
//    - Settings by default are for 4h timeframe, divergences are more stronger and accurate. Haven't tested in all timeframes, only 2h and 4h.
//    - If you get an interesting result in other timeframes I would be very grateful if you would comment your configuration to implement it or at least check it.
//
//  CONTRIBUTIONS:
//    - Tip/Idea: Add higher timeframe analysis for bearish/bullish patterns at the current timeframe.
//    + Bearish/Bullish FLAG:
//      - MFI+RSI Area are RED (Below 0).
//      - Wavetrend waves are above 0 and crosses down.
//      - VWAP Area are below 0 on higher timeframe.
//      - This pattern reversed becomes bullish.
//    - Tip/Idea: Check the last heikinashi candle from 2 higher timeframe
//    + Bearish/Bullish DIAMOND:
//      - HT Candle is red
//      - WT > 0 and crossed down

study(title = 'VMB', shorttitle = 'VMB')

// PARAMETERS {

// Oscillator1
ShowOscillator1 = input(true, "Oscillator 1 -----------", group = "Oscillator 1")
Oscillator1In             = input(defval="Double RSI's - From The Original MarketCipher B",                    title="Type",                    options=["Double RSI's - From The Original MarketCipher B", "MFI", "RSI", "RSI.Signal Line - Set Value - RSI 13, Signal Line (Linear Regression) 21", "Ultimate Oscillator - Set Value - 7, 14, 28", "Williams % R (Shifted Up by 100)"],           group = "Oscillator 1", tooltip = "'Double RSI's' Derive From The Original MarketCipher B They are infact Not RSI's at all but actually Pseudo RSI's They consist of a Fast and a Slow Standard Stochastic K Fast K = 40 and Slow K = 81")
Oscillator1LengthIn       = input(14,                                    "Length", minval=1,                                                                                                                                                                                                    group = "Oscillator 1")
Oscillator1Source         = input(defval=close,                    title="Source (RSI and MFI)",    type=input.source,                                                                                                                                                                          group = "Oscillator 1")
Oscillator1OBOSIn         = input(defval="70 / 30",                title="Over Bought / Over Sold", options=["OFF", "70 / 30", "75 / 25", "80 / 20", "85 / 15", "90 / 10", "95 / 5"],                                                                                                           group = "Oscillator 1")

// WaveTrend
wtShow = input(true, title = 'Show WaveTrend', type = input.bool, group = 'WaveTrend Settings')
//wtBuyShow = input(true, title = 'Show Buy dots', type = input.bool, group = 'WaveTrend Settings')
//wtGoldShow = input(true, title = 'Show Gold dots', type = input.bool, group = 'WaveTrend Settings')
///wtSellShow = input(true, title = 'Show Sell dots', type = input.bool, group = 'WaveTrend Settings')
//wtDivShow = input(true, title = 'Show Div. dots', type = input.bool, group = 'WaveTrend Settings')
vwapShow = input(true, title = 'Show Fast WT', type = input.bool, group = 'WaveTrend Settings')
wtChannelLen = input(9, title = 'WT Channel Length', type = input.integer, group = 'WaveTrend Settings')
wtAverageLen = input(12, title = 'WT Average Length', type = input.integer, group = 'WaveTrend Settings')
wtMASource = input(hlc3, title = 'WT MA Source', type = input.source, group = 'WaveTrend Settings')
wtMALen = input(3, title = 'WT MA Length', type = input.integer, group = 'WaveTrend Settings')

// WaveTrend Overbought & Oversold lines
obLevel = input(53, title = 'WT Overbought Level 1', type = input.integer, group = 'WaveTrend Settings')
obLevel2 = input(60, title = 'WT Overbought Level 2', type = input.integer, group = 'WaveTrend Settings')
obLevel3 = input(100, title = 'WT Overbought Level 3', type = input.integer, group = 'WaveTrend Settings')
osLevel = input(-53, title = 'WT Oversold Level 1', type = input.integer, group = 'WaveTrend Settings')
osLevel2 = input(-60, title = 'WT Oversold Level 2', type = input.integer, group = 'WaveTrend Settings')
osLevel3 = input(-75, title = 'WT Oversold Level 3', type = input.integer, group = 'WaveTrend Settings')

// Divergence WT
wtShowDiv = input(false, title = 'Show WT Regular Divergences', type = input.bool, group = 'WaveTrend Settings')
wtShowHiddenDiv = input(false, title = 'Show WT Hidden Divergences', type = input.bool, group = 'WaveTrend Settings')
showHiddenDiv_nl = input(true, title = 'Not apply OB/OS Limits on Hidden Divergences', type = input.bool, group = 'WaveTrend Settings')
wtDivOBLevel = input(45, title = 'WT Bearish Divergence min', type = input.integer, group = 'WaveTrend Settings')
wtDivOSLevel = input(-65, title = 'WT Bullish Divergence min', type = input.integer, group = 'WaveTrend Settings')

// Divergence extra range
wtDivOBLevel_addshow = input(true, title = 'Show 2nd WT Regular Divergences', type = input.bool, group = 'WaveTrend Settings')
wtDivOBLevel_add = input(15, title = 'WT 2nd Bearish Divergence', type = input.integer, group = 'WaveTrend Settings')
wtDivOSLevel_add = input(-40, title = 'WT 2nd Bullish Divergence 15 min', type = input.integer, group = 'WaveTrend Settings')

// RSI+MFI
rsiMFIShow = input(true, title = 'Show MFI', type = input.bool, group = 'MFI Settings')
rsiMFIperiod = input(60,title = 'MFI Period', type = input.integer, group = 'MFI Settings')
rsiMFIMultiplier = input(150, title = 'MFI Area multiplier', type = input.float, group = 'MFI Settings')
rsiMFIPosY = input(2.5, title = 'MFI Area Y Pos', type = input.float, group = 'MFI Settings')

// RSI
rsiShow = input(true, title = 'Show RSI', type = input.bool, group = 'RSI Settings')
rsiSRC = input(close, title = 'RSI Source', type = input.source, group = 'RSI Settings')
rsiLen = input(14, title = 'RSI Length', type = input.integer, group = 'RSI Settings')
rsiOversold = input(20, title = 'RSI Oversold', minval = 50, maxval = 100, type = input.integer, group = 'RSI Settings')
rsiOverbought = input(70, title = 'RSI Overbought', minval = 0, maxval = 50, type = input.integer, group = 'RSI Settings')

// Divergence RSI
rsiShowDiv = input(true, title = 'Show RSI Regular Divergences', type = input.bool, group = 'RSI Settings')
rsiShowHiddenDiv = input(false, title = 'Show RSI Hidden Divergences', type = input.bool, group = 'RSI Settings')
rsiDivOBLevel = input(60, title = 'RSI Bearish Divergence min', type = input.integer, group = 'RSI Settings')
rsiDivOSLevel = input(30, title = 'RSI Bullish Divergence min', type = input.integer, group = 'RSI Settings')

// RSI Stochastic
stochShow = input(true, title = 'Show Stochastic RSI', type = input.bool, group = 'Stoch Settings')
stochUseLog = input(true, title=' Use Log?', type = input.bool, group = 'Stoch Settings')
stochAvg = input(false, title='Use Average of both K & D', type = input.bool, group = 'Stoch Settings')
stochSRC = input(close, title = 'Stochastic RSI Source', type = input.source, group = 'Stoch Settings')
stochLen = input(14, title = 'Stochastic RSI Length', type = input.integer, group = 'Stoch Settings')
stochRsiLen = input(14, title = 'RSI Length ', type = input.integer, group = 'Stoch Settings')
stochKSmooth = input(3, title = 'Stochastic RSI K Smooth', type = input.integer, group = 'Stoch Settings')
stochDSmooth = input(3, title = 'Stochastic RSI D Smooth', type = input.integer, group = 'Stoch Settings')

// Divergence stoch
stochShowDiv = input(false, title = 'Show Stoch Regular Divergences', type = input.bool, group = 'Stoch Settings')
stochShowHiddenDiv = input(false, title = 'Show Stoch Hidden Divergences', type = input.bool, group = 'Stoch Settings')

// Schaff Trend Cycle
tcLine = input(false, title="Show Schaff TC line", type=input.bool, group = 'Schaff Settings')
tcSRC = input(close, title = 'Schaff TC Source', type = input.source, group = 'Schaff Settings')
tclength = input(10, title="Schaff TC", type=input.integer, group = 'Schaff Settings')
tcfastLength = input(23, title="Schaff TC Fast Lenght", type=input.integer, group = 'Schaff Settings')
tcslowLength = input(50, title="Schaff TC Slow Length", type=input.integer, group = 'Schaff Settings')
tcfactor = input(0.5, title="Schaff TC Factor", type=input.float, group = 'Schaff Settings')

// Sommi Flag
sommiFlagShow = input(false, title = 'Show Sommi flag', type = input.bool, group = 'Sommi Settings')
sommiShowVwap = input(false, title = 'Show Sommi F. Wave', type = input.bool, group = 'Sommi Settings')
sommiVwapTF = input('720', title = 'Sommi F. Wave timeframe', type = input.string, group = 'Sommi Settings')
sommiVwapBearLevel = input(0, title = 'F. Wave Bear Level (less than)', type = input.integer, group = 'Sommi Settings')
sommiVwapBullLevel = input(0, title = 'F. Wave Bull Level (more than)', type = input.integer, group = 'Sommi Settings')
soomiFlagWTBearLevel = input(0, title = 'WT Bear Level (more than)', type = input.integer, group = 'Sommi Settings') 
soomiFlagWTBullLevel = input(0, title = 'WT Bull Level (less than)', type = input.integer, group = 'Sommi Settings') 
soomiRSIMFIBearLevel = input(0, title = 'Money flow Bear Level (less than)', type = input.integer, group = 'Sommi Settings') 
soomiRSIMFIBullLevel = input(0, title = 'Money flow Bull Level (more than)', type = input.integer, group = 'Sommi Settings') 

// Sommi Diamond
sommiDiamondShow = input(false, title = 'Show Sommi diamond', type = input.bool, group = 'Sommi Settings')
sommiHTCRes = input('60', title = 'HTF Candle Res. 1', type = input.string, group = 'Sommi Settings')
sommiHTCRes2 = input('240', title = 'HTF Candle Res. 2', type = input.string, group = 'Sommi Settings')
soomiDiamondWTBearLevel = input(0, title = 'WT Bear Level (More than)', type = input.integer, group = 'Sommi Settings')
soomiDiamondWTBullLevel = input(0, title = 'WT Bull Level (Less than)', type = input.integer, group = 'Sommi Settings')

// macd Colors
macdWTColorsShow = input(false, title = 'Show MACD Colors', type = input.bool, group = 'MACD Settings')
macdWTColorsTF = input('240', title = 'MACD Colors MACD TF', type = input.string, group = 'MACD Settings')

darkMode = input(false, title = 'Dark mode', type = input.bool, group = 'Mode Settings')


// Colors
colorRed = #ff0000
colorPurple = #e600e6
colorGreen = #3fff00
colorOrange = #e2a400
colorYellow = #ffe500
colorWhite = #ffffff
colorPink = #ff00f0
colorBluelight = #31c0ff
colorWT2 = #0d47a1
colorWT2_ = #131722
colormacdWT1a = #4caf58
colormacdWT1b = #af4c4c
colormacdWT1c = #7ee57e
colormacdWT1d = #ff3535
colormacdWT2a = #305630
colormacdWT2b = #310101
colormacdWT2c = #132213
colormacdWT2d = #770000

// } PARAMETERS

// FUNCTIONS {
  
// Divergences 
f_top_fractal(src) => src[4] < src[2] and src[3] < src[2] and src[2] > src[1] and src[2] > src[0]
f_bot_fractal(src) => src[4] > src[2] and src[3] > src[2] and src[2] < src[1] and src[2] < src[0]
f_fractalize(src) => f_top_fractal(src) ? 1 : f_bot_fractal(src) ? -1 : 0

f_findDivs(src, topLimit, botLimit, useLimits) =>
    fractalTop = f_fractalize(src) > 0 and (useLimits ? src[2] >= topLimit : true) ? src[2] : na
    fractalBot = f_fractalize(src) < 0 and (useLimits ? src[2] <= botLimit : true) ? src[2] : na
    highPrev = valuewhen(fractalTop, src[2], 0)[2]
    highPrice = valuewhen(fractalTop, high[2], 0)[2]
    lowPrev = valuewhen(fractalBot, src[2], 0)[2]
    lowPrice = valuewhen(fractalBot, low[2], 0)[2]
    bearSignal = fractalTop and high[2] > highPrice and src[2] < highPrev
    bullSignal = fractalBot and low[2] < lowPrice and src[2] > lowPrev
    bearDivHidden = fractalTop and high[2] < highPrice and src[2] > highPrev
    bullDivHidden = fractalBot and low[2] > lowPrice and src[2] < lowPrev
    [fractalTop, fractalBot, lowPrev, bearSignal, bullSignal, bearDivHidden, bullDivHidden]
        
// RSI+MFI
f_rsimfi(_period, _multiplier, _tf) => security(syminfo.tickerid, _tf, sma(((close - open) / (high - low)) * _multiplier, _period) - rsiMFIPosY)
   
// WaveTrend
f_wavetrend(src, chlen, avg, malen, tf) =>
    tfsrc = security(syminfo.tickerid, tf, src)
    esa = ema(tfsrc, chlen)
    de = ema(abs(tfsrc - esa), chlen)
    ci = (tfsrc - esa) / (0.015 * de)
    wt1 = security(syminfo.tickerid, tf, ema(ci, avg))
    wt2 = security(syminfo.tickerid, tf, sma(wt1, malen))
    wtVwap = wt1 - wt2
    wtOversold = wt2 <= osLevel
    wtOverbought = wt2 >= obLevel
    wtCross = cross(wt1, wt2)
    wtCrossUp = wt2 - wt1 <= 0
    wtCrossDown = wt2 - wt1 >= 0
    wtCrosslast = cross(wt1[2], wt2[2])
    wtCrossUplast = wt2[2] - wt1[2] <= 0
    wtCrossDownlast = wt2[2] - wt1[2] >= 0
    [wt1, wt2, wtOversold, wtOverbought, wtCross, wtCrossUp, wtCrossDown, wtCrosslast, wtCrossUplast, wtCrossDownlast, wtVwap]

// Schaff Trend Cycle
f_tc(src, length, fastLength, slowLength) =>
    ema1 = ema(src, fastLength)
    ema2 = ema(src, slowLength)
    macdVal = ema1 - ema2	
    alpha = lowest(macdVal, length)
    beta = highest(macdVal, length) - alpha
    gamma = (macdVal - alpha) / beta * 100
    gamma := beta > 0 ? gamma : nz(gamma[1])
    delta = gamma
    delta := na(delta[1]) ? delta : delta[1] + tcfactor * (gamma - delta[1])
    epsilon = lowest(delta, length)
    zeta = highest(delta, length) - epsilon
    eta = (delta - epsilon) / zeta * 100
    eta := zeta > 0 ? eta : nz(eta[1])
    stcReturn = eta
    stcReturn := na(stcReturn[1]) ? stcReturn : stcReturn[1] + tcfactor * (eta - stcReturn[1])
    stcReturn

// Stochastic RSI
f_stochrsi(_src, _stochlen, _rsilen, _smoothk, _smoothd, _log, _avg) =>
    src = _log ? log(_src) : _src
    rsi = rsi(src, _rsilen)
    kk = sma(stoch(rsi, rsi, rsi, _stochlen), _smoothk)
    d1 = sma(kk, _smoothd)
    avg_1 = avg(kk, d1)
    k = _avg ? avg_1 : kk
    [k, d1]

// MACD
f_macd(src, fastlen, slowlen, sigsmooth, tf) =>
    fast_ma = security(syminfo.tickerid, tf, ema(src, fastlen))
    slow_ma = security(syminfo.tickerid, tf, ema(src, slowlen))
    macd = fast_ma - slow_ma,
    signal = security(syminfo.tickerid, tf, sma(macd, sigsmooth))
    hist = macd - signal
    [macd, signal, hist]

// MACD Colors on WT    
f_macdWTColors(tf) =>
    hrsimfi = f_rsimfi(rsiMFIperiod, rsiMFIMultiplier, tf)
    [macd, signal, hist] = f_macd(close, 28, 42, 9, macdWTColorsTF)
    macdup = macd >= signal
    macddown = macd <= signal
    macdWT1Color = macdup ? hrsimfi > 0 ? colormacdWT1c : colormacdWT1a : macddown ? hrsimfi < 0 ? colormacdWT1d : colormacdWT1b : na
    macdWT2Color = macdup ? hrsimfi < 0 ? colormacdWT2c : colormacdWT2a : macddown ? hrsimfi < 0 ? colormacdWT2d : colormacdWT2b : na 
    [macdWT1Color, macdWT2Color]
    
// Get higher timeframe candle
f_getTFCandle(_tf) => 
    _open  = security(heikinashi(syminfo.tickerid), _tf, open, barmerge.gaps_off, barmerge.lookahead_on)
    _close = security(heikinashi(syminfo.tickerid), _tf, close, barmerge.gaps_off, barmerge.lookahead_on)
    _high  = security(heikinashi(syminfo.tickerid), _tf, high, barmerge.gaps_off, barmerge.lookahead_on)
    _low   = security(heikinashi(syminfo.tickerid), _tf, low, barmerge.gaps_off, barmerge.lookahead_on)
    hl2   = (_high + _low) / 2.0
    newBar = change(_open)
    candleBodyDir = _close > _open
    [candleBodyDir, newBar]

// Sommi flag
f_findSommiFlag(tf, wt1, wt2, rsimfi, wtCross, wtCrossUp, wtCrossDown) =>    
    [hwt1, hwt2, hwtOversold, hwtOverbought, hwtCross, hwtCrossUp, hwtCrossDown, hwtCrosslast, hwtCrossUplast, hwtCrossDownlast, hwtVwap] = f_wavetrend(wtMASource, wtChannelLen, wtAverageLen, wtMALen, tf)      
    
    bearPattern = rsimfi < soomiRSIMFIBearLevel and
                   wt2 > soomiFlagWTBearLevel and 
                   wtCross and 
                   wtCrossDown and 
                   hwtVwap < sommiVwapBearLevel
                   
    bullPattern = rsimfi > soomiRSIMFIBullLevel and 
                   wt2 < soomiFlagWTBullLevel and 
                   wtCross and 
                   wtCrossUp and 
                   hwtVwap > sommiVwapBullLevel
    
    [bearPattern, bullPattern, hwtVwap]
    
f_findSommiDiamond(tf, tf2, wt1, wt2, wtCross, wtCrossUp, wtCrossDown) =>
    [candleBodyDir, newBar] = f_getTFCandle(tf)
    [candleBodyDir2, newBar2] = f_getTFCandle(tf2)
    bearPattern = wt2 >= soomiDiamondWTBearLevel and
                   wtCross and
                   wtCrossDown and
                   not candleBodyDir and
                   not candleBodyDir2                   
    bullPattern = wt2 <= soomiDiamondWTBullLevel and
                   wtCross and
                   wtCrossUp and
                   candleBodyDir and
                   candleBodyDir2 
    [bearPattern, bullPattern]
 
// } FUNCTIONS  

// CALCULATE INDICATORS {

// RSI
rsi = rsi(rsiSRC, rsiLen)
rsiobcolor = input(color.new(#ff0000, 0), 'RSI OverBought', group = 'Color Settings')
rsioscolor = input(color.new(#1dff00, 0), 'RSI OverSold', group = 'Color Settings')
rsinacolor = input(color.new(#ff9800, 20), 'RSI InBetween', group = 'Color Settings')
rsiColor = rsi <= rsiOversold ? rsioscolor : rsi >= rsiOverbought ? rsiobcolor : rsinacolor

// RSI + MFI Area
rsiMFI = f_rsimfi(rsiMFIperiod, rsiMFIMultiplier, timeframe.period)
rsiMFIColorAbove = input(color.new(#00e2ff, 35), 'MFI Color > 0', group = 'Color Settings')
rsiMFIColorBelow = input(color.new(#ff00f9, 35), 'MFI Color < 0', group = 'Color Settings')
rsiMFIColor = rsiMFI > 0 ? rsiMFIColorAbove : rsiMFIColorBelow

// Calculates WaveTrend
[wt1, wt2, wtOversold, wtOverbought, wtCross, wtCrossUp, wtCrossDown, wtCross_last, wtCrossUp_last, wtCrossDown_last, wtVwap] = f_wavetrend(wtMASource, wtChannelLen, wtAverageLen, wtMALen, timeframe.period)
 
// Stochastic RSI
[stochK, stochD] = f_stochrsi(stochSRC, stochLen, stochRsiLen, stochKSmooth, stochDSmooth, stochUseLog, stochAvg)

// Schaff Trend Cycle
tcVal = f_tc(tcSRC, tclength, tcfastLength, tcslowLength)

// Sommi flag
[sommiBearish, sommiBullish, hvwap] = f_findSommiFlag(sommiVwapTF, wt1, wt2, rsiMFI, wtCross,  wtCrossUp, wtCrossDown)

//Sommi diamond
[sommiBearishDiamond, sommiBullishDiamond] = f_findSommiDiamond(sommiHTCRes, sommiHTCRes2, wt1, wt2, wtCross, wtCrossUp, wtCrossDown)

// macd colors
[macdWT1Color, macdWT2Color] = f_macdWTColors(macdWTColorsTF)

// WT Divergences
[wtFractalTop, wtFractalBot, wtLow_prev, wtBearDiv, wtBullDiv, wtBearDivHidden, wtBullDivHidden] = f_findDivs(wt2, wtDivOBLevel, wtDivOSLevel, true)
    
[wtFractalTop_add, wtFractalBot_add, wtLow_prev_add, wtBearDiv_add, wtBullDiv_add, wtBearDivHidden_add, wtBullDivHidden_add] =  f_findDivs(wt2, wtDivOBLevel_add, wtDivOSLevel_add, true)
[wtFractalTop_nl, wtFractalBot_nl, wtLow_prev_nl, wtBearDiv_nl, wtBullDiv_nl, wtBearDivHidden_nl, wtBullDivHidden_nl] =  f_findDivs(wt2, 0, 0, false)

wtBearDivHidden_ = showHiddenDiv_nl ? wtBearDivHidden_nl : wtBearDivHidden
wtBullDivHidden_ = showHiddenDiv_nl ? wtBullDivHidden_nl : wtBullDivHidden

WTBearDivColorDown = input(color.new(#e60000, 35), 'WT Bear Div', group = 'Color Settings') 
wtBullDivColorUp = input(color.new(#38ff42, 0), 'WT Bull Div', group = 'Color Settings') 

wtBearDivColor = (wtShowDiv and wtBearDiv) or (wtShowHiddenDiv and wtBearDivHidden_) ? WTBearDivColorDown : na
wtBullDivColor = (wtShowDiv and wtBullDiv) or (wtShowHiddenDiv and wtBullDivHidden_) ? wtBullDivColorUp : na

wtBearDivColor_add = (wtShowDiv and (wtDivOBLevel_addshow and wtBearDiv_add)) or (wtShowHiddenDiv and (wtDivOBLevel_addshow and wtBearDivHidden_add)) ? WTBearDivColorDown: na
wtBullDivColor_add = (wtShowDiv and (wtDivOBLevel_addshow and wtBullDiv_add)) or (wtShowHiddenDiv and (wtDivOBLevel_addshow and wtBullDivHidden_add)) ? wtBullDivColorUp : na

// RSI Divergences
[rsiFractalTop, rsiFractalBot, rsiLow_prev, rsiBearDiv, rsiBullDiv, rsiBearDivHidden, rsiBullDivHidden] = f_findDivs(rsi, rsiDivOBLevel, rsiDivOSLevel, true)
[rsiFractalTop_nl, rsiFractalBot_nl, rsiLow_prev_nl, rsiBearDiv_nl, rsiBullDiv_nl, rsiBearDivHidden_nl, rsiBullDivHidden_nl] = f_findDivs(rsi, 0, 0, false)

rsiBearDivHidden_ = showHiddenDiv_nl ? rsiBearDivHidden_nl : rsiBearDivHidden
rsiBullDivHidden_ = showHiddenDiv_nl ? rsiBullDivHidden_nl : rsiBullDivHidden

rsiBearColor = color.new(#e60000, 0) //input(color.new(#e60000, 0), 'RSI Bear Div', group = 'Color Settings')
rsiBullColor = color.new(#38ff42, 0) //input(color.new(#38ff42, 0), 'RSI Bull Div', group = 'Color Settings')

rsiBearDivColor = (rsiShowDiv and rsiBearDiv) or (rsiShowHiddenDiv and rsiBearDivHidden_) ? rsiBearColor : na
rsiBullDivColor = (rsiShowDiv and rsiBullDiv) or (rsiShowHiddenDiv and rsiBullDivHidden_) ? rsiBullColor : na
 
// Stoch Divergences
[stochFractalTop, stochFractalBot, stochLow_prev, stochBearDiv, stochBullDiv, stochBearDivHidden, stochBullDivHidden] = f_findDivs(stochK, 0, 0, false)

stochbearcolor = color.new(#e60000, 0) //input(color.new(#e60000, 0), 'Stoch Bear Div', group = 'Color Settings')
stochbullcolor = color.new(#38ff42, 0) //input(color.new(#38ff42, 0), 'Stoch Bull Div', group = 'Color Settings')

stochBearDivColor = (stochShowDiv and stochBearDiv) or (stochShowHiddenDiv and stochBearDivHidden) ? stochbearcolor : na
stochBullDivColor = (stochShowDiv and stochBullDiv) or (stochShowHiddenDiv and stochBullDivHidden) ? stochbullcolor : na


// Small Circles WT Cross
signalcolorup = input(color.new(#ffeb3b, 0), 'WT Buy Dot', group = 'Color Settings')
signalcolordown = input(color.new(#2962ff, 0), 'WT Sell Dot', group = 'Color Settings')

signalColor = wt2 - wt1 > 0 ? signalcolordown : signalcolorup

// Buy signal.
buySignal = wtCross and wtCrossUp and wtOversold

buySignalDiv = (wtShowDiv and wtBullDiv) or 
               (wtShowDiv and wtBullDiv_add) or 
               (stochShowDiv and stochBullDiv) or 
               (rsiShowDiv and rsiBullDiv)
    
buySignalDiv_color = wtBullDiv ? colorGreen : 
                     wtBullDiv_add ? color.new(colorGreen, 60) : 
                     rsiShowDiv ? colorGreen : na

// Sell signal
sellSignal = wtCross and wtCrossDown and wtOverbought
             
sellSignalDiv = (wtShowDiv and wtBearDiv) or 
               (wtShowDiv and wtBearDiv_add) or
               (stochShowDiv and stochBearDiv) or
               (rsiShowDiv and rsiBearDiv)
                    
sellSignalDiv_color = wtBearDiv ? colorRed : 
                     wtBearDiv_add ? color.new(colorRed, 60) : 
                     rsiBearDiv ? colorRed : na

// Gold Buy 
lastRsi = valuewhen(wtFractalBot, rsi[2], 0)[2]
wtGoldBuy = ((wtShowDiv and wtBullDiv) or (rsiShowDiv and rsiBullDiv)) and
           wtLow_prev <= osLevel3 and
           wt2 > osLevel3 and
           wtLow_prev - wt2 <= -5 and
           lastRsi < 30           
          
// } CALCULATE INDICATORS


// DRAW {
bgcolor(darkMode ? color.new(#000000, 0) : na)
//zLine = plot(0, color = color.new(colorWhite, 50))

//  MFI BAR
//rsiMfiBarTopLine = plot(rsiMFIShow ? -95 : na, title = 'MFI Bar TOP Line', transp = 100)
//rsiMfiBarBottomLine = plot(rsiMFIShow ? -99 : na, title = 'MFI Bar BOTTOM Line', transp = 100)
//fill(rsiMfiBarTopLine, rsiMfiBarBottomLine, title = 'MFI Bar Colors', color = rsiMFIColor, transp = 75)

// WT Areas
colorWT1blue = input(color.new(#ffffff, 15), "WT1 Fill", group = 'Color Settings')
colorWT2purple = input(color.new(#000000, 30), 'WT2 Fill', group = 'Color Settings')
plot(wtShow ? wt1 : na, style=plot.style_area, title='WT Wave 1', color=color.new(colorWT1blue, 30))

// plot(wtShow ? wt2 : na, style=plot.style_area, title='WT Wave 2', color=darkMode ? color.new(colorWT2_,25) : color.new(colorWT2purple,25))
plot(wtShow ? wt2 : na, style=plot.style_area, title='WT Wave 2', color = color.new(colorWT2purple,25))

// VWAP
VWAPColor = input(color.new(#f8bbd0, 50), "VWAP", group = 'Color Settings')
plot(vwapShow ? wtVwap : na, title = 'VWAP', color = VWAPColor, style = plot.style_area, linewidth = 1, transp = 45)

// MFI AREA
// rsiMFIplot = plot(rsiMFIShow ? rsiMFI : na, title='RSI+MFI Area', color=color.new(rsiMFIColor,90))
// fill(rsiMFIplot, zLine, color.new(rsiMFIColor,50))
plot(rsiMFIShow ? rsiMFI : na, style=plot.style_area, title='rsiMFI', color = color.new(rsiMFIColor,50))


// WT Div

//plot(series = wtFractalTop ? wt2[2] : na, title = 'WT Bearish Divergence', color = wtBearDivColor, linewidth = 2, offset = -2)
//plot(series = wtFractalBot ? wt2[2] : na, title = 'WT Bullish Divergence', color = wtBullDivColor, linewidth = 2, offset = -2)

// WT 2nd Div
//plot(series = wtFractalTop_add ? wt2[2] : na, title = 'WT 2nd Bearish Divergence', color = wtBearDivColor_add, linewidth = 2, offset = -2)
//plot(series = wtFractalBot_add ? wt2[2] : na, title = 'WT 2nd Bullish Divergence', color = wtBullDivColor_add, linewidth = 2, offset = -2)

// RSI
plot(rsiShow ? rsi : na, title = 'RSI', color = rsiColor, linewidth = 1, transp = 25)

// RSI Div
plot(series = rsiFractalTop ? rsi[2] : na, title='RSI Bearish Divergence', color = rsiBearDivColor, linewidth = 1, offset = -2)
plot(series = rsiFractalBot ? rsi[2] : na, title='RSI Bullish Divergence', color = rsiBullDivColor, linewidth = 1, offset = -2)

// Stochastic RSI
stochkcolor = input(color.new(#21baf3, 70), "Stoch K", group = 'Color Settings')
stochdcolor = input(color.new(#673ab7, 90), "Stoch D", group = 'Color Settings')

//stochKplot = plot(stochShow ? stochK : na, title = 'Stoch K', color = stochkcolor, linewidth = 2)
//stochDplot = plot(stochShow ? stochD : na, title = 'Stoch D', color = stochdcolor, linewidth = 1)
//stochFillColor = stochK >= stochD ? color.new(#21baf3, 95) : color.new(#673ab7, 90)
//fill(stochKplot, stochDplot, title='KD Fill', color=stochFillColor)

// Stoch Div
//plot(series = stochFractalTop ? stochK[2] : na, title='Stoch Bearish Divergence', color = stochBearDivColor, linewidth = 1, offset = -2)
//plot(series = stochFractalBot ? stochK[2] : na, title='Stoch Bullish Divergence', color = stochBullDivColor, linewidth = 1, offset = -2)

// Schaff Trend Cycle
//plot(tcLine ? tcVal : na, color = color.new(#673ab7, 25), linewidth = 2, title = "Schaff Trend Cycle 1")
//plot(tcLine ? tcVal : na, color = color.new(colorWhite, 50), linewidth = 1, title = "Schaff Trend Cycle 2")


// Draw Overbought & Oversold lines
oblvl2color = color.new(#9598a1, 85) //input(color.new(#ffffff, 0), "OB LVL 2", group = 'Color Settings')
oblvl3color = color.new(#9598a1, 85) //input(color.new(#ffffff, 0), "OB LVL 3", group = 'Color Settings')
oslvl2color = color.new(#9598a1, 85) //input(color.new(#ffffff, 0), "OS LVL 2", group = 'Color Settings')

plot(obLevel, title = 'Over Bought Level 1', color = oblvl2color, linewidth = 1, style = plot.style_circles, transp = 0)
plot(obLevel2, title = 'Over Bought Level 2', color = oblvl2color, linewidth = 1, style = plot.style_stepline, transp = 0)
plot(obLevel3, title = 'Over Bought Level 3', color = oblvl3color, linewidth = 1, style = plot.style_circles, transp = 0)

plot(osLevel, title = 'Over Sold Level 1', color = oslvl2color, linewidth = 1, style = plot.style_circles, transp = 0)
plot(osLevel2, title = 'Over Sold Level 2', color = oslvl2color, linewidth = 1, style = plot.style_stepline, transp = 0)

// Sommi flag
//plotchar(sommiFlagShow and sommiBearish ? 108 : na, title = 'Sommi bearish flag', char='⚑', color = colorPink, location = location.absolute, size = size.tiny, transp = 0)
//plotchar(sommiFlagShow and sommiBullish ? -108 : na, title = 'Sommi bullish flag', char='⚑', color = colorBluelight, location = location.absolute, size = size.tiny, transp = 0)
//plot(sommiShowVwap ? ema(hvwap, 3) : na, title = 'Sommi higher VWAP', color = colorYellow, linewidth = 2, style = plot.style_line, transp = 55)

// Sommi diamond
//plotchar(sommiDiamondShow and sommiBearishDiamond ? 108 : na, title = 'Sommi bearish diamond', char='◆', color = colorPink, location = location.absolute, size = size.tiny, transp = 0)
//plotchar(sommiDiamondShow and sommiBullishDiamond ? -108 : na, title = 'Sommi bullish diamond', char='◆', color = colorBluelight, location = location.absolute, size = size.tiny, transp = 0)

// Circles
plot(wtCross ? wt2 : na, title = 'Buy and sell circle', color = signalColor, style = plot.style_circles, linewidth = 2, transp = 15)

//plotchar(wtBuyShow and buySignal ? -107 : na, title = 'Buy circle', char='·', color = colorGreen, location = location.absolute, size = size.small, transp = 50)
//plotchar(wtSellShow and sellSignal ? 105 : na , title = 'Sell circle', char='·', color = colorRed, location = location.absolute, size = size.small, transp = 50)

//plotchar(wtDivShow and buySignalDiv ? -106 : na, title = 'Divergence buy circle', char='•', color = buySignalDiv_color, location = location.absolute, size = size.small, offset = -2, transp = 15)
//plotchar(wtDivShow and sellSignalDiv ? 106 : na, title = 'Divergence sell circle', char='•', color = sellSignalDiv_color, location = location.absolute, size = size.small, offset = -2, transp = 15)

//plotchar(wtGoldBuy and wtGoldShow ? -106 : na, title = 'Gold  buy gold circle', char='•', color = colorOrange, location = location.absolute, size = size.normal, offset = -2, transp = 15)

// } DRAW


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// MA Types & Function Calculations 

NonHA = tickerid(syminfo.prefix, syminfo.ticker)
Close = security(NonHA, timeframe.period, close)

HA_Open  = security(heikinashi(syminfo.tickerid), timeframe.period, open)
HA_Close = security(heikinashi(syminfo.tickerid), timeframe.period, close)
HA_High  = security(heikinashi(syminfo.tickerid), timeframe.period, high)
HA_Low   = security(heikinashi(syminfo.tickerid), timeframe.period, low)
HA_HLC3  = security(heikinashi(syminfo.tickerid), timeframe.period, hlc3)

// MFI Calculations

mfi(PriceSrc, PeriodLength) =>
    PositiveMoneyFlow = sum(volume * (change(PriceSrc) <= 0 ? 0 : PriceSrc), PeriodLength)
    NegativeMoneyFlow = sum(volume * (change(PriceSrc) >= 0 ? 0 : PriceSrc), PeriodLength)
    rsi(PositiveMoneyFlow, NegativeMoneyFlow)

dmf(PriceSrc, PeriodLength) =>
    alpha = tr == 0 ? 0 : (PriceSrc - PriceSrc[1]) / tr
    ctr   = tr == 0 ? 0 : volume * (1 - abs(alpha)) * 
       (PriceSrc - min(HA_Low, PriceSrc[1]) + PriceSrc - max(HA_High, PriceSrc[1])) / tr
    ctc   = volume * alpha
    rma(ctr + ctc, PeriodLength) / rma(volume, PeriodLength)

// Ultimate Oscillator Calculations

UltOsclength1 = 7   //input(7,      "Oscillator 2 - Length 1", minval=1)
UltOsclength2 = 14  //input(14,     "Oscillator 2 - Length 2", minval=1) 
UltOsclength3 = 28  //input(28,     "Oscillator 2 - Length 3", minval=1)

UltOscaverage(UltOscbp, UltOsctr_, UltOsclength) =>
    sum(UltOscbp, UltOsclength) / sum(UltOsctr_, UltOsclength)
UltOschigh_ = max(high, close[1])
UltOsclow_  = min(low, close[1])
UltOscbp    = close - UltOsclow_
UltOsctr_   = UltOschigh_ - UltOsclow_
UltOscavg7  = UltOscaverage(UltOscbp, UltOsctr_, UltOsclength1)
UltOscavg14 = UltOscaverage(UltOscbp, UltOsctr_, UltOsclength2)
UltOscavg28 = UltOscaverage(UltOscbp, UltOsctr_, UltOsclength3)
UltOscOut   = 100 * (4 * UltOscavg7 + 2 * UltOscavg14 + UltOscavg28) / 7
UltOscColor = UltOscOut > UltOscOut[1] ? color.lime : color.red

// Williams % R Calculations

WilliamsPercentR(PriceSrc, PeriodLength) =>
    max = highest(PeriodLength)
    min = lowest(PeriodLength)
    100 * (PriceSrc - max) / (max - min)

// RSI Signal Line Calculations

RSILength = 13
RSISigLength = 21
RSI1 = rsi(Close, RSILength)

variant_linear_regression_sma(src, len) =>
    LRSMAx        = bar_index
    LRSMAy        = src
    LRSMAx_       = sma(LRSMAx, len)
    LRSMAy_       = sma(LRSMAy, len)
    LRSMAmx       = stdev(LRSMAx, len)
    LRSMAmy       = stdev(LRSMAy, len)
    LRSMAc        = correlation(LRSMAx, LRSMAy, len)
    LRSMAslope    = LRSMAc * (LRSMAmy / LRSMAmx)
    LRSMAinter    = LRSMAy_ - LRSMAslope * LRSMAx_
    LRSMALinReg1  = 0.0
    LRSMALinReg1 := LRSMAx * LRSMAslope + LRSMAinter
    LRSMALinReg1

LinReg            = variant_linear_regression_sma(RSI1, RSISigLength)

// - variant(type, src, len, gamma)
// Returns MA input selection variant, default to SMA if blank or typo.

// SuperSmoother filter
// © 2013  John F. Ehlers
variant_supersmoother(src, len) =>
    a1 = exp(-1.414 * 3.14159 / len)
    b1 = 2 * a1 * cos(1.414 * 3.14159 / len)
    c2 = b1
    c3 = -a1 * a1
    c1 = 1 - c2 - c3
    v9 = 0.0
    v9 := c1 * (src + nz(src[1])) / 2 + c2 * nz(v9[1]) + c3 * nz(v9[2])
    v9

variant_smoothed(src, len) =>
    v5 = 0.0
    sma_1 = sma(src, len)
    v5 := na(v5[1]) ? sma_1 : (v5[1] * (len - 1) + src) / len
    v5

variant_zerolagema(src, len) =>
    xLag = (len - 1) / 2
    xEMA = src + src - src[xLag]
    v10 = ema(xEMA, len)
    v10

variant_doubleema(src, len) =>
    v2 = ema(src, len)
    v6 = 2 * v2 - ema(v2, len)
    v6

variant_tripleema(src, len) =>
    v2 = ema(src, len)
    v7 = 3 * (v2 - ema(v2, len)) + ema(ema(v2, len), len)  // Triple Exponential
    v7


ma(matype, src, length) =>
    result = src
    if length>1
        result := matype == "EMA" ? ema(src,length)                                                            :
          matype == "DEMA"   ? variant_doubleema(src,length)                                                   :        
          matype == "HullMA" ? wma(2 * wma(src, length / 2) - wma(src, length), round(sqrt(length)))           :
          matype == "RMA"    ? rma(src, length)                                                                :
          matype == "TEMA"   ? variant_tripleema(src,length)                                                   :
          matype == "TMA"    ? sma(sma(src,length),length)                                                     :
          matype == "SMA"    ? sma(src, length)                                                                :
          matype == "SMMA"   ? variant_smoothed(src,length)                                                    :
          matype == "SSMA"   ? variant_supersmoother(src,length)                                               :
          matype == "VWMA"   ? vwma(src, length)                                                               :
          matype == "WMA"    ? wma(src,length)                                                                 : 
          matype == "ZEMA"   ? variant_zerolagema(src,length)                                                  :

        //   matype == "'Double RSI' Crossover" ? DoubleRSICrossOver :
          matype == "Dynamic Money Flow"  ? dmf(src, length)                                                   :
          matype == "MFI"    ? mfi(src, length)                                                                :
          matype == "RSI"    ? rsi(src, length)                                                                :
          matype == "RSI Signal Line Cross - Set Value - RSI 13, Sig 21"                        ? rsi(src, 13) :
          matype == "RSI.Signal Line - Set Value - RSI 13, Signal Line (Linear Regression) 21"  ? LinReg       :
          matype == "Ultimate Oscillator - Set Value - 7, 14, 28"                               ? UltOscOut    :
                         src       

    //end if
    result
 
//////////////////////////////////////////////////////////////////////////////////////////////////
// Oscillator 1
Oscillator1OB = Oscillator1OBOSIn == "70 / 30" ? 70 : 
   Oscillator1OBOSIn == "75 / 25" ? 75 : Oscillator1OBOSIn == "80 / 20" ? 80 : 
   Oscillator1OBOSIn == "90 / 10" ? 90 : Oscillator1OBOSIn == "95 / 5" ? 95 : 100

Oscillator1OS = Oscillator1OBOSIn == "70 / 30" ? 30 : 
   Oscillator1OBOSIn == "75 / 25" ? 25 : Oscillator1OBOSIn == "80 / 20" ? 20 : 
   Oscillator1OBOSIn == "90 / 10" ? 10 : Oscillator1OBOSIn == "95 / 5" ? 5 : 0

// Pseudo Double RSI's - From Original Market Cipher 

DoubleRSI_K_Fast = sma(stoch(close, high, low, 40), 2)
DoubleRSI_K_Slow = sma(stoch(close, high, low, 81), 2)
DoubleRSICrossOver = DoubleRSI_K_Slow < DoubleRSI_K_Fast ? 1 : 0 
 

mfi__1              = mfi(Oscillator1Source, Oscillator1LengthIn)
rsi_1               = rsi(Oscillator1Source, Oscillator1LengthIn)
WilliamsPercentR__1 = WilliamsPercentR(Oscillator1Source, Oscillator1LengthIn)
rsi_2               = rsi(Close, 13)
Oscillator1         = Oscillator1In == "Ultimate Oscillator - Set Value - 7, 14, 28" ? UltOscOut : Oscillator1In == "MFI" ? mfi__1 : Oscillator1In == "RSI" ? rsi_1 : Oscillator1In == "Williams % R (Shifted Up by 100)" ? WilliamsPercentR__1 + 100 : Oscillator1In == "Double RSI's - From The Original MarketCipher B" ? DoubleRSI_K_Fast : rsi_2


// Oscillator 1 Plotted with Trend Bar under Wave Trend with Trend Meter 1 for Clarity so that it is Not Over Shadowed by Wave Trend //

// Oscillator 1

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Trend Meter 1

// Linear Regression Calculation For RSI 

x       = bar_index
y       = rsi(Oscillator1Source, 13)
x_      = sma(x, 21)
y_      = sma(y, 21)
mx      = stdev(x, 21)
my      = stdev(y, 21)
c       = correlation(x, y, 21)
slope   = c * (my / mx)
inter   = y_ - slope * x_
LinReg1 = x * slope + inter

RSI5Above50             = rsi(close, 5) > 50 ? 1 : 0
RSI13Above50            = rsi(close, 13) > 50 ? 1 : 0
RSISigCross             = rsi(Oscillator1Source, 13) > LinReg1 ? 1 : 0
RSISignalLineDirection  = LinReg1 > LinReg1[1] ? 1 : 0
color_8                 = color.new(#00e2ff, 3)  // color(#3CB371, 27) : color(#FF1DCE, 35) 
color_9                 = color.new(#673ab7, 4)
LinRegColor             = LinReg1 > LinReg1[1] ?                color_8 : color_9 
DoubleRSIColor          = DoubleRSI_K_Slow < DoubleRSI_K_Fast ? color_8 : color_9   //color_8 :color_9 
RSISignalLineColor      = Oscillator1In == "Double RSI's - From The Original MarketCipher B" ? DoubleRSIColor : LinRegColor

// Fast MACD Calculations

FastMACDfastMA          = 8
FastMACDslowMA          = 21
FastMACDsignalSmooth    = 5

FastMACDLine            = ema(close, FastMACDfastMA) - ema(close, FastMACDslowMA)
FastSignalLine          = ema(FastMACDLine, FastMACDsignalSmooth)
FastMACDHistogram       = FastMACDLine - FastSignalLine
FastMACDHistogramCross  = FastMACDHistogram > 0 ? 1 : 0

// TMColor1

TMColor1DoubleRSI              = DoubleRSICrossOver ?                   color.new(#3CB371, 30) : color.new(color.red, 10)
TMColor1FastMACD               = FastMACDHistogramCross ?               color.new(#3CB371, 30) : color.new(color.red, 10)
TMColor1RSISignalLineCross     = rsi(Oscillator1Source, 13) > LinReg1 ? color.new(#3CB371, 30) : color.new(color.red, 10)
TMColor1RSISignalLineDirection = RSISignalLineDirection ?               color.new(#3CB371, 30) : color.new(color.red, 10)
TMColor1Oscillator1PosNeg      = Oscillator1 > 50 ?                     color.new(#3CB371, 30) : color.new(color.red, 10)

// TMColor2
TMColor2DoubleRSI              = DoubleRSICrossOver ?                   color.new(#288a75, 25) : color.new(color.red, 20)
TMColor2FastMACD               = FastMACDHistogramCross ?               color.new(#288a75, 25) : color.new(color.red, 20)
TMColor2RSISignalLineCross     = rsi(Oscillator1Source, 13) > LinReg1 ? color.new(#288a75, 25) : color.new(color.red, 20)
TMColor2RSISignalLineDirection = RSISignalLineDirection ?               color.new(#288a75, 25) : color.new(color.red, 20)
TMColor2Oscillator1PosNeg      = Oscillator1 > 50 ?                     color.new(#288a75, 25) : color.new(color.red, 20)
Oscillator1Above50             = Oscillator1 > 50 ?                                          1 : 0

// Oscillator 1 Calculations and Plot

Osc1StandardColor = color.new(#ffffff,  0)
Osc1OBOSColor     = color.new(#ffffff,  30)
RsiBearColor = color.new(#e60000, 0)
RsiBullColor = color.new(#38ff42, 0)

Osc1ColorUltOsc   = Oscillator1 > Oscillator1OB - 1 ? Osc1OBOSColor : Oscillator1 < Oscillator1OS + 1 ? Osc1OBOSColor : Osc1StandardColor
Osc1ColorRSIMFI   = Oscillator1 > Oscillator1OB ?     RsiBearColor : Oscillator1 < Oscillator1OS ?     RsiBullColor : Osc1StandardColor
Oscillator1Color  = Oscillator1In == "Ultimate Oscillator - Set Value - 7, 14, 28" ? Osc1ColorUltOsc : Oscillator1In == "Double RSI's - From The Original MarketCipher B" ? Osc1OBOSColor : Osc1ColorRSIMFI
Osc1Width         = Oscillator1In == "Double RSI's - From The Original MarketCipher B" ? 1 : 3 

// Oscillator 1 Plots  -----

plot(ShowOscillator1 ? Oscillator1 : na, color=Oscillator1Color, linewidth= Osc1Width, title="Oscillator 1")
plot(ShowOscillator1 and Oscillator1In == "RSI.Signal Line - Set Value - RSI 13, Signal Line (Linear Regression) 21" ? LinReg1 : Oscillator1In == "Double RSI's - From The Original MarketCipher B" ? DoubleRSI_K_Slow : na, color=RSISignalLineColor, linewidth=2, title="Oscillator 1 - RSI Linear Regression Signal Line")
// Alerts & Conditions - Osc1 OB / OS 

Osc1OB = Oscillator1In == "Ultimate Oscillator - Set Value - 7, 14, 28" and Oscillator1 > Oscillator1OB - 1 or Oscillator1 > Oscillator1OB and not(Oscillator1In == "Ultimate Oscillator - Set Value - 7, 14, 28") ? 1 : 0
Osc1OS = Oscillator1In == "Ultimate Oscillator - Set Value - 7, 14, 28" and Oscillator1 < Oscillator1OS + 1 or Oscillator1 < Oscillator1OS and not(Oscillator1In == "Ultimate Oscillator - Set Value - 7, 14, 28") ? 1 : 0

Osc1ChangedToOB = Osc1OB    and not Osc1OB[1]
Osc1ChangedToOS = Osc1OS    and not Osc1OS[1]

Osc1NoLongerOB  = Osc1OB[1] and not Osc1OB
Osc1NoLongerOS  = Osc1OS[1] and not Osc1OS

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

s      = input(true,                   "Show Entered RSI Price Level",  input.bool )
s2     = input(false,                "Show RSI Level for Input Price",  input.bool )
bg     = input(true,                           "Invisible Background",  input.bool )
lenema = input(12,                                       "EMA Length", input.integer, minval=2)
pan    = input(true,                        " Show Information Panel",  input.bool )
off    = input(25,                          "  Panel Position Offset",  input.integer, minval=0)
ersi   = input(50.0,                            "  Entered RSI Input",  input.float)
ob     = input(80.0,                               "Overbought Input", input.float,minval=0,step=5)
os     = input(20.0,                                 "Oversold Input", input.float,minval=0,step=5)
src    = input(close,                            "===== Source =====", input.source)
len    = input(14,                                       "RSI Length", input.integer, minval=2)
dec    = input(1,                                          "Decimals",  input.integer, minval=0 , maxval = 10)
ip     = input(10000,                       "  Entered Price for RSI",  input.float)

//Reverse RSI Functions
reverse(Level) =>
    x1 = (len - 1) * (rma(max(nz(src[1],src) - src, 0), len) * Level / (100 - Level) - rma(max(src - nz(src[1],src), 0), len))
    iff(x1 >= 0, src + x1, src + x1 * (100 - Level) / Level)

//RSIEMA
ma1 = ema(rsi, lenema)

//Reverse RSI Price Level Calculations
revma = reverse(ma1)
revob = reverse(ob)
revos = reverse(os)
reversi = reverse(ersi)

//Reverse Reverse RSI
rr(input)=>
    alpha = 1 / len
    up1 = rma(max(change(src),0),len) 
    down1 = rma(-min(change(src), 0), len)
    up = alpha * max(input - src[1], 0) + (1 - alpha)*nz(up1[1])
    down = alpha * -min(input - src[1], 0) + (1 - alpha)*nz(down1[1])
    rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))

rrrsi = rr(ip)

//Information Panel
labelstyle = label.style_label_center
labelstyle2 = label.style_label_lower_left

labelc = bg ? color.new(#000000, 100) : color.new(#000000, 45)

//Round Function
Round(src, digits) => 
    p = pow(10,digits)
    round(abs(src)*p)/p*sign(src)

//Offset 
xp(offset) => 
    time + round(change(time) * offset)

lable1(offset,P, T, s, color_PnL) =>
    label PnL_Label = na
    PnL_Label := label.new(xp(offset), P, text = T, color=color_PnL, textcolor=color.white, style = s, yloc=yloc.price, xloc=xloc.bar_time,size=size.normal)
    label.delete(PnL_Label[1])


ud()=>
    if rsi < ma1
        "UP"
    else
        "DOWN"

//Panel Plot
if (pan)        
    lable1(off,50, "Cross " + ud() +  " : " + tostring(Round(revma,dec))  + "\n\n" + tostring(Round(ob,dec)) + " OB : " + tostring(Round(revob,dec)) +  "\n\n" + tostring(Round(os,dec)) + " OS : " + tostring(Round(revos,dec)),labelstyle,labelc)


if(s)
    lable1(1,ersi, tostring(Round(ersi,dec)) + " RSI : " + tostring(Round(reversi,dec))  ,labelstyle2,labelc)


if(s2)
    lable1(1,rrrsi,  "RSI " + tostring(Round(rrrsi,dec)) +  " For Input Price " + tostring(Round(ip,dec)) ,labelstyle2, labelc)
    




// ALERTS {
  
// BUY
alertcondition(buySignal, 'Buy (Big green circle)', 'Green circle WaveTrend Oversold')
alertcondition(buySignalDiv, 'Buy (Big green circle + Div)', 'Buy & WT Bullish Divergence & WT Overbought')
alertcondition(wtGoldBuy, 'GOLD Buy (Big GOLDEN circle)', 'Green & GOLD circle WaveTrend Overbought')
alertcondition(sommiBullish or sommiBullishDiamond, 'Sommi bullish flag/diamond', 'Blue flag/diamond')
alertcondition(wtCross and wtCrossUp, 'Buy (Small green dot)', 'Buy small circle')

// SELL
alertcondition(sommiBearish or sommiBearishDiamond, 'Sommi bearish flag/diamond', 'Purple flag/diamond')
alertcondition(sellSignal, 'Sell (Big red circle)', 'Red Circle WaveTrend Overbought')
alertcondition(sellSignalDiv, 'Sell (Big red circle + Div)', 'Buy & WT Bearish Divergence & WT Overbought')
alertcondition(wtCross and wtCrossDown, 'Sell (Small red dot)', 'Sell small circle')

// } ALERTS
